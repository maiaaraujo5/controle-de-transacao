// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/maiaaraujo5/controle-de-transacao/app/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// Account is an autogenerated mock type for the Account type
type Account struct {
	mock.Mock
}

// FindByDocumentNumber provides a mock function with given fields: ctx, documentNumber
func (_m *Account) FindByDocumentNumber(ctx context.Context, documentNumber string) (*model.Account, error) {
	ret := _m.Called(ctx, documentNumber)

	var r0 *model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Account, error)); ok {
		return rf(ctx, documentNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Account); ok {
		r0 = rf(ctx, documentNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, documentNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *Account) FindByID(ctx context.Context, ID int64) (*model.Account, error) {
	ret := _m.Called(ctx, ID)

	var r0 *model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.Account, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Account); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, account
func (_m *Account) Save(ctx context.Context, account *model.Account) (*model.Account, error) {
	ret := _m.Called(ctx, account)

	var r0 *model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Account) (*model.Account, error)); ok {
		return rf(ctx, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Account) *model.Account); ok {
		r0 = rf(ctx, account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Account) error); ok {
		r1 = rf(ctx, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccount creates a new instance of Account. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccount(t interface {
	mock.TestingT
	Cleanup(func())
}) *Account {
	mock := &Account{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
